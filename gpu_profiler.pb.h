// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpu_profiler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gpu_5fprofiler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gpu_5fprofiler_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpu_5fprofiler_2eproto;
namespace bbts {
class cpu_to_gpu_stat_t;
struct cpu_to_gpu_stat_tDefaultTypeInternal;
extern cpu_to_gpu_stat_tDefaultTypeInternal _cpu_to_gpu_stat_t_default_instance_;
class gc_request_evict_stat_t;
struct gc_request_evict_stat_tDefaultTypeInternal;
extern gc_request_evict_stat_tDefaultTypeInternal _gc_request_evict_stat_t_default_instance_;
class gc_request_free_stat_t;
struct gc_request_free_stat_tDefaultTypeInternal;
extern gc_request_free_stat_tDefaultTypeInternal _gc_request_free_stat_t_default_instance_;
class gc_request_stat_t;
struct gc_request_stat_tDefaultTypeInternal;
extern gc_request_stat_tDefaultTypeInternal _gc_request_stat_t_default_instance_;
class gpu_device_log_t;
struct gpu_device_log_tDefaultTypeInternal;
extern gpu_device_log_tDefaultTypeInternal _gpu_device_log_t_default_instance_;
class gpu_profiler_log_t;
struct gpu_profiler_log_tDefaultTypeInternal;
extern gpu_profiler_log_tDefaultTypeInternal _gpu_profiler_log_t_default_instance_;
class gpu_to_gpu_stat_t;
struct gpu_to_gpu_stat_tDefaultTypeInternal;
extern gpu_to_gpu_stat_tDefaultTypeInternal _gpu_to_gpu_stat_t_default_instance_;
class gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t;
struct gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_tDefaultTypeInternal;
extern gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_tDefaultTypeInternal _gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t_default_instance_;
class kernel_run_stats_t;
struct kernel_run_stats_tDefaultTypeInternal;
extern kernel_run_stats_tDefaultTypeInternal _kernel_run_stats_t_default_instance_;
class scheduled_kernel_stat_t;
struct scheduled_kernel_stat_tDefaultTypeInternal;
extern scheduled_kernel_stat_tDefaultTypeInternal _scheduled_kernel_stat_t_default_instance_;
class scheduled_kernel_stat_t_gpu_transfer_stat_t;
struct scheduled_kernel_stat_t_gpu_transfer_stat_tDefaultTypeInternal;
extern scheduled_kernel_stat_t_gpu_transfer_stat_tDefaultTypeInternal _scheduled_kernel_stat_t_gpu_transfer_stat_t_default_instance_;
class tensor_evicted_stat_t;
struct tensor_evicted_stat_tDefaultTypeInternal;
extern tensor_evicted_stat_tDefaultTypeInternal _tensor_evicted_stat_t_default_instance_;
class tensor_freed_stat_t;
struct tensor_freed_stat_tDefaultTypeInternal;
extern tensor_freed_stat_tDefaultTypeInternal _tensor_freed_stat_t_default_instance_;
}  // namespace bbts
PROTOBUF_NAMESPACE_OPEN
template<> ::bbts::cpu_to_gpu_stat_t* Arena::CreateMaybeMessage<::bbts::cpu_to_gpu_stat_t>(Arena*);
template<> ::bbts::gc_request_evict_stat_t* Arena::CreateMaybeMessage<::bbts::gc_request_evict_stat_t>(Arena*);
template<> ::bbts::gc_request_free_stat_t* Arena::CreateMaybeMessage<::bbts::gc_request_free_stat_t>(Arena*);
template<> ::bbts::gc_request_stat_t* Arena::CreateMaybeMessage<::bbts::gc_request_stat_t>(Arena*);
template<> ::bbts::gpu_device_log_t* Arena::CreateMaybeMessage<::bbts::gpu_device_log_t>(Arena*);
template<> ::bbts::gpu_profiler_log_t* Arena::CreateMaybeMessage<::bbts::gpu_profiler_log_t>(Arena*);
template<> ::bbts::gpu_to_gpu_stat_t* Arena::CreateMaybeMessage<::bbts::gpu_to_gpu_stat_t>(Arena*);
template<> ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* Arena::CreateMaybeMessage<::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t>(Arena*);
template<> ::bbts::kernel_run_stats_t* Arena::CreateMaybeMessage<::bbts::kernel_run_stats_t>(Arena*);
template<> ::bbts::scheduled_kernel_stat_t* Arena::CreateMaybeMessage<::bbts::scheduled_kernel_stat_t>(Arena*);
template<> ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* Arena::CreateMaybeMessage<::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t>(Arena*);
template<> ::bbts::tensor_evicted_stat_t* Arena::CreateMaybeMessage<::bbts::tensor_evicted_stat_t>(Arena*);
template<> ::bbts::tensor_freed_stat_t* Arena::CreateMaybeMessage<::bbts::tensor_freed_stat_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bbts {

// ===================================================================

class kernel_run_stats_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.kernel_run_stats_t) */ {
 public:
  inline kernel_run_stats_t() : kernel_run_stats_t(nullptr) {}
  ~kernel_run_stats_t() override;
  explicit PROTOBUF_CONSTEXPR kernel_run_stats_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  kernel_run_stats_t(const kernel_run_stats_t& from);
  kernel_run_stats_t(kernel_run_stats_t&& from) noexcept
    : kernel_run_stats_t() {
    *this = ::std::move(from);
  }

  inline kernel_run_stats_t& operator=(const kernel_run_stats_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline kernel_run_stats_t& operator=(kernel_run_stats_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const kernel_run_stats_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const kernel_run_stats_t* internal_default_instance() {
    return reinterpret_cast<const kernel_run_stats_t*>(
               &_kernel_run_stats_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(kernel_run_stats_t& a, kernel_run_stats_t& b) {
    a.Swap(&b);
  }
  inline void Swap(kernel_run_stats_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kernel_run_stats_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  kernel_run_stats_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<kernel_run_stats_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const kernel_run_stats_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const kernel_run_stats_t& from) {
    kernel_run_stats_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kernel_run_stats_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.kernel_run_stats_t";
  }
  protected:
  explicit kernel_run_stats_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelRunIdxFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // uint64 kernel_run_idx = 1;
  void clear_kernel_run_idx();
  uint64_t kernel_run_idx() const;
  void set_kernel_run_idx(uint64_t value);
  private:
  uint64_t _internal_kernel_run_idx() const;
  void _internal_set_kernel_run_idx(uint64_t value);
  public:

  // uint64 start = 2;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 end = 3;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.kernel_run_stats_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t kernel_run_idx_;
    uint64_t start_;
    uint64_t end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t) */ {
 public:
  inline gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t() : gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t(nullptr) {}
  ~gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t() override;
  explicit PROTOBUF_CONSTEXPR gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t(const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& from);
  gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t&& from) noexcept
    : gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t() {
    *this = ::std::move(from);
  }

  inline gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& operator=(const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& operator=(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* internal_default_instance() {
    return reinterpret_cast<const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t*>(
               &_gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& a, gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& from) {
    gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t";
  }
  protected:
  explicit gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBytesFieldNumber = 2,
    kTensorFieldNumber = 1,
    kSrcDevFieldNumber = 3,
  };
  // uint64 num_bytes = 2;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // int32 tensor = 1;
  void clear_tensor();
  int32_t tensor() const;
  void set_tensor(int32_t value);
  private:
  int32_t _internal_tensor() const;
  void _internal_set_tensor(int32_t value);
  public:

  // int32 src_dev = 3;
  void clear_src_dev();
  int32_t src_dev() const;
  void set_src_dev(int32_t value);
  private:
  int32_t _internal_src_dev() const;
  void _internal_set_src_dev(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t num_bytes_;
    int32_t tensor_;
    int32_t src_dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gpu_to_gpu_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gpu_to_gpu_stat_t) */ {
 public:
  inline gpu_to_gpu_stat_t() : gpu_to_gpu_stat_t(nullptr) {}
  ~gpu_to_gpu_stat_t() override;
  explicit PROTOBUF_CONSTEXPR gpu_to_gpu_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gpu_to_gpu_stat_t(const gpu_to_gpu_stat_t& from);
  gpu_to_gpu_stat_t(gpu_to_gpu_stat_t&& from) noexcept
    : gpu_to_gpu_stat_t() {
    *this = ::std::move(from);
  }

  inline gpu_to_gpu_stat_t& operator=(const gpu_to_gpu_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gpu_to_gpu_stat_t& operator=(gpu_to_gpu_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gpu_to_gpu_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gpu_to_gpu_stat_t* internal_default_instance() {
    return reinterpret_cast<const gpu_to_gpu_stat_t*>(
               &_gpu_to_gpu_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(gpu_to_gpu_stat_t& a, gpu_to_gpu_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gpu_to_gpu_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gpu_to_gpu_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gpu_to_gpu_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gpu_to_gpu_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gpu_to_gpu_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gpu_to_gpu_stat_t& from) {
    gpu_to_gpu_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gpu_to_gpu_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gpu_to_gpu_stat_t";
  }
  protected:
  explicit gpu_to_gpu_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t gpu_to_gpu_tensor_stat_t;

  // accessors -------------------------------------------------------

  enum : int {
    kTensorsFieldNumber = 3,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kSourceDevFieldNumber = 4,
    kDstDevFieldNumber = 5,
  };
  // repeated .bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t tensors = 3;
  int tensors_size() const;
  private:
  int _internal_tensors_size() const;
  public:
  void clear_tensors();
  ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* mutable_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t >*
      mutable_tensors();
  private:
  const ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& _internal_tensors(int index) const;
  ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* _internal_add_tensors();
  public:
  const ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& tensors(int index) const;
  ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* add_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t >&
      tensors() const;

  // uint64 start = 1;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 end = 2;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // int32 source_dev = 4;
  void clear_source_dev();
  int32_t source_dev() const;
  void set_source_dev(int32_t value);
  private:
  int32_t _internal_source_dev() const;
  void _internal_set_source_dev(int32_t value);
  public:

  // int32 dst_dev = 5;
  void clear_dst_dev();
  int32_t dst_dev() const;
  void set_dst_dev(int32_t value);
  private:
  int32_t _internal_dst_dev() const;
  void _internal_set_dst_dev(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gpu_to_gpu_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t > tensors_;
    uint64_t start_;
    uint64_t end_;
    int32_t source_dev_;
    int32_t dst_dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class cpu_to_gpu_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.cpu_to_gpu_stat_t) */ {
 public:
  inline cpu_to_gpu_stat_t() : cpu_to_gpu_stat_t(nullptr) {}
  ~cpu_to_gpu_stat_t() override;
  explicit PROTOBUF_CONSTEXPR cpu_to_gpu_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cpu_to_gpu_stat_t(const cpu_to_gpu_stat_t& from);
  cpu_to_gpu_stat_t(cpu_to_gpu_stat_t&& from) noexcept
    : cpu_to_gpu_stat_t() {
    *this = ::std::move(from);
  }

  inline cpu_to_gpu_stat_t& operator=(const cpu_to_gpu_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline cpu_to_gpu_stat_t& operator=(cpu_to_gpu_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cpu_to_gpu_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const cpu_to_gpu_stat_t* internal_default_instance() {
    return reinterpret_cast<const cpu_to_gpu_stat_t*>(
               &_cpu_to_gpu_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(cpu_to_gpu_stat_t& a, cpu_to_gpu_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(cpu_to_gpu_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cpu_to_gpu_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cpu_to_gpu_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cpu_to_gpu_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cpu_to_gpu_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const cpu_to_gpu_stat_t& from) {
    cpu_to_gpu_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cpu_to_gpu_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.cpu_to_gpu_stat_t";
  }
  protected:
  explicit cpu_to_gpu_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorsFieldNumber = 3,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kNumBytesFieldNumber = 5,
    kDstDevFieldNumber = 4,
  };
  // repeated int32 tensors = 3;
  int tensors_size() const;
  private:
  int _internal_tensors_size() const;
  public:
  void clear_tensors();
  private:
  int32_t _internal_tensors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tensors() const;
  void _internal_add_tensors(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tensors();
  public:
  int32_t tensors(int index) const;
  void set_tensors(int index, int32_t value);
  void add_tensors(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tensors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tensors();

  // uint64 start = 1;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 end = 2;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // uint64 num_bytes = 5;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // int32 dst_dev = 4;
  void clear_dst_dev();
  int32_t dst_dev() const;
  void set_dst_dev(int32_t value);
  private:
  int32_t _internal_dst_dev() const;
  void _internal_set_dst_dev(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.cpu_to_gpu_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tensors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _tensors_cached_byte_size_;
    uint64_t start_;
    uint64_t end_;
    uint64_t num_bytes_;
    int32_t dst_dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class tensor_freed_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.tensor_freed_stat_t) */ {
 public:
  inline tensor_freed_stat_t() : tensor_freed_stat_t(nullptr) {}
  ~tensor_freed_stat_t() override;
  explicit PROTOBUF_CONSTEXPR tensor_freed_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tensor_freed_stat_t(const tensor_freed_stat_t& from);
  tensor_freed_stat_t(tensor_freed_stat_t&& from) noexcept
    : tensor_freed_stat_t() {
    *this = ::std::move(from);
  }

  inline tensor_freed_stat_t& operator=(const tensor_freed_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline tensor_freed_stat_t& operator=(tensor_freed_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tensor_freed_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const tensor_freed_stat_t* internal_default_instance() {
    return reinterpret_cast<const tensor_freed_stat_t*>(
               &_tensor_freed_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(tensor_freed_stat_t& a, tensor_freed_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(tensor_freed_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tensor_freed_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tensor_freed_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tensor_freed_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tensor_freed_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const tensor_freed_stat_t& from) {
    tensor_freed_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tensor_freed_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.tensor_freed_stat_t";
  }
  protected:
  explicit tensor_freed_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kTensorFieldNumber = 2,
    kDstDevFieldNumber = 3,
    kNumBytesFieldNumber = 4,
  };
  // uint64 start = 1;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // int32 tensor = 2;
  void clear_tensor();
  int32_t tensor() const;
  void set_tensor(int32_t value);
  private:
  int32_t _internal_tensor() const;
  void _internal_set_tensor(int32_t value);
  public:

  // int32 dst_dev = 3;
  void clear_dst_dev();
  int32_t dst_dev() const;
  void set_dst_dev(int32_t value);
  private:
  int32_t _internal_dst_dev() const;
  void _internal_set_dst_dev(int32_t value);
  public:

  // uint64 num_bytes = 4;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.tensor_freed_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t start_;
    int32_t tensor_;
    int32_t dst_dev_;
    uint64_t num_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class tensor_evicted_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.tensor_evicted_stat_t) */ {
 public:
  inline tensor_evicted_stat_t() : tensor_evicted_stat_t(nullptr) {}
  ~tensor_evicted_stat_t() override;
  explicit PROTOBUF_CONSTEXPR tensor_evicted_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tensor_evicted_stat_t(const tensor_evicted_stat_t& from);
  tensor_evicted_stat_t(tensor_evicted_stat_t&& from) noexcept
    : tensor_evicted_stat_t() {
    *this = ::std::move(from);
  }

  inline tensor_evicted_stat_t& operator=(const tensor_evicted_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline tensor_evicted_stat_t& operator=(tensor_evicted_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tensor_evicted_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const tensor_evicted_stat_t* internal_default_instance() {
    return reinterpret_cast<const tensor_evicted_stat_t*>(
               &_tensor_evicted_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(tensor_evicted_stat_t& a, tensor_evicted_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(tensor_evicted_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tensor_evicted_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tensor_evicted_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tensor_evicted_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tensor_evicted_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const tensor_evicted_stat_t& from) {
    tensor_evicted_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tensor_evicted_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.tensor_evicted_stat_t";
  }
  protected:
  explicit tensor_evicted_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kTensorFieldNumber = 3,
    kDstDevFieldNumber = 4,
    kNumBytesFieldNumber = 5,
  };
  // uint64 start = 1;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 end = 2;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // int32 tensor = 3;
  void clear_tensor();
  int32_t tensor() const;
  void set_tensor(int32_t value);
  private:
  int32_t _internal_tensor() const;
  void _internal_set_tensor(int32_t value);
  public:

  // int32 dst_dev = 4;
  void clear_dst_dev();
  int32_t dst_dev() const;
  void set_dst_dev(int32_t value);
  private:
  int32_t _internal_dst_dev() const;
  void _internal_set_dst_dev(int32_t value);
  public:

  // uint64 num_bytes = 5;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.tensor_evicted_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t start_;
    uint64_t end_;
    int32_t tensor_;
    int32_t dst_dev_;
    uint64_t num_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class scheduled_kernel_stat_t_gpu_transfer_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t) */ {
 public:
  inline scheduled_kernel_stat_t_gpu_transfer_stat_t() : scheduled_kernel_stat_t_gpu_transfer_stat_t(nullptr) {}
  ~scheduled_kernel_stat_t_gpu_transfer_stat_t() override;
  explicit PROTOBUF_CONSTEXPR scheduled_kernel_stat_t_gpu_transfer_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  scheduled_kernel_stat_t_gpu_transfer_stat_t(const scheduled_kernel_stat_t_gpu_transfer_stat_t& from);
  scheduled_kernel_stat_t_gpu_transfer_stat_t(scheduled_kernel_stat_t_gpu_transfer_stat_t&& from) noexcept
    : scheduled_kernel_stat_t_gpu_transfer_stat_t() {
    *this = ::std::move(from);
  }

  inline scheduled_kernel_stat_t_gpu_transfer_stat_t& operator=(const scheduled_kernel_stat_t_gpu_transfer_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scheduled_kernel_stat_t_gpu_transfer_stat_t& operator=(scheduled_kernel_stat_t_gpu_transfer_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const scheduled_kernel_stat_t_gpu_transfer_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const scheduled_kernel_stat_t_gpu_transfer_stat_t* internal_default_instance() {
    return reinterpret_cast<const scheduled_kernel_stat_t_gpu_transfer_stat_t*>(
               &_scheduled_kernel_stat_t_gpu_transfer_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(scheduled_kernel_stat_t_gpu_transfer_stat_t& a, scheduled_kernel_stat_t_gpu_transfer_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scheduled_kernel_stat_t_gpu_transfer_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scheduled_kernel_stat_t_gpu_transfer_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  scheduled_kernel_stat_t_gpu_transfer_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<scheduled_kernel_stat_t_gpu_transfer_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const scheduled_kernel_stat_t_gpu_transfer_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const scheduled_kernel_stat_t_gpu_transfer_stat_t& from) {
    scheduled_kernel_stat_t_gpu_transfer_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scheduled_kernel_stat_t_gpu_transfer_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t";
  }
  protected:
  explicit scheduled_kernel_stat_t_gpu_transfer_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcDevFieldNumber = 1,
    kTidFieldNumber = 2,
  };
  // int32 src_dev = 1;
  void clear_src_dev();
  int32_t src_dev() const;
  void set_src_dev(int32_t value);
  private:
  int32_t _internal_src_dev() const;
  void _internal_set_src_dev(int32_t value);
  public:

  // int32 tid = 2;
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t src_dev_;
    int32_t tid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class scheduled_kernel_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.scheduled_kernel_stat_t) */ {
 public:
  inline scheduled_kernel_stat_t() : scheduled_kernel_stat_t(nullptr) {}
  ~scheduled_kernel_stat_t() override;
  explicit PROTOBUF_CONSTEXPR scheduled_kernel_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  scheduled_kernel_stat_t(const scheduled_kernel_stat_t& from);
  scheduled_kernel_stat_t(scheduled_kernel_stat_t&& from) noexcept
    : scheduled_kernel_stat_t() {
    *this = ::std::move(from);
  }

  inline scheduled_kernel_stat_t& operator=(const scheduled_kernel_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scheduled_kernel_stat_t& operator=(scheduled_kernel_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const scheduled_kernel_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const scheduled_kernel_stat_t* internal_default_instance() {
    return reinterpret_cast<const scheduled_kernel_stat_t*>(
               &_scheduled_kernel_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(scheduled_kernel_stat_t& a, scheduled_kernel_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scheduled_kernel_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scheduled_kernel_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  scheduled_kernel_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<scheduled_kernel_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const scheduled_kernel_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const scheduled_kernel_stat_t& from) {
    scheduled_kernel_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scheduled_kernel_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.scheduled_kernel_stat_t";
  }
  protected:
  explicit scheduled_kernel_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef scheduled_kernel_stat_t_gpu_transfer_stat_t gpu_transfer_stat_t;

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 7,
    kInputSizesFieldNumber = 8,
    kOutputFieldNumber = 9,
    kOutputSizesFieldNumber = 10,
    kCpuTransfersFieldNumber = 11,
    kGpuTransfersFieldNumber = 12,
    kUdNameFieldNumber = 3,
    kImplNameFieldNumber = 4,
    kKernelRunIdFieldNumber = 1,
    kCommandIdFieldNumber = 2,
    kStartFieldNumber = 5,
    kDevFieldNumber = 6,
  };
  // repeated int32 input = 7;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  private:
  int32_t _internal_input(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_input() const;
  void _internal_add_input(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_input();
  public:
  int32_t input(int index) const;
  void set_input(int index, int32_t value);
  void add_input(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_input();

  // repeated uint64 input_sizes = 8;
  int input_sizes_size() const;
  private:
  int _internal_input_sizes_size() const;
  public:
  void clear_input_sizes();
  private:
  uint64_t _internal_input_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_input_sizes() const;
  void _internal_add_input_sizes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_input_sizes();
  public:
  uint64_t input_sizes(int index) const;
  void set_input_sizes(int index, uint64_t value);
  void add_input_sizes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      input_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_input_sizes();

  // repeated int32 output = 9;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  private:
  int32_t _internal_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_output() const;
  void _internal_add_output(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_output();
  public:
  int32_t output(int index) const;
  void set_output(int index, int32_t value);
  void add_output(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_output();

  // repeated uint64 output_sizes = 10;
  int output_sizes_size() const;
  private:
  int _internal_output_sizes_size() const;
  public:
  void clear_output_sizes();
  private:
  uint64_t _internal_output_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_output_sizes() const;
  void _internal_add_output_sizes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_output_sizes();
  public:
  uint64_t output_sizes(int index) const;
  void set_output_sizes(int index, uint64_t value);
  void add_output_sizes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      output_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_output_sizes();

  // repeated int32 cpu_transfers = 11;
  int cpu_transfers_size() const;
  private:
  int _internal_cpu_transfers_size() const;
  public:
  void clear_cpu_transfers();
  private:
  int32_t _internal_cpu_transfers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cpu_transfers() const;
  void _internal_add_cpu_transfers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cpu_transfers();
  public:
  int32_t cpu_transfers(int index) const;
  void set_cpu_transfers(int index, int32_t value);
  void add_cpu_transfers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cpu_transfers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cpu_transfers();

  // repeated .bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t gpu_transfers = 12;
  int gpu_transfers_size() const;
  private:
  int _internal_gpu_transfers_size() const;
  public:
  void clear_gpu_transfers();
  ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* mutable_gpu_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t >*
      mutable_gpu_transfers();
  private:
  const ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t& _internal_gpu_transfers(int index) const;
  ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* _internal_add_gpu_transfers();
  public:
  const ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t& gpu_transfers(int index) const;
  ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* add_gpu_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t >&
      gpu_transfers() const;

  // string ud_name = 3;
  void clear_ud_name();
  const std::string& ud_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ud_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ud_name();
  PROTOBUF_NODISCARD std::string* release_ud_name();
  void set_allocated_ud_name(std::string* ud_name);
  private:
  const std::string& _internal_ud_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ud_name(const std::string& value);
  std::string* _internal_mutable_ud_name();
  public:

  // string impl_name = 4;
  void clear_impl_name();
  const std::string& impl_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_impl_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_impl_name();
  PROTOBUF_NODISCARD std::string* release_impl_name();
  void set_allocated_impl_name(std::string* impl_name);
  private:
  const std::string& _internal_impl_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_impl_name(const std::string& value);
  std::string* _internal_mutable_impl_name();
  public:

  // uint64 kernel_run_id = 1;
  void clear_kernel_run_id();
  uint64_t kernel_run_id() const;
  void set_kernel_run_id(uint64_t value);
  private:
  uint64_t _internal_kernel_run_id() const;
  void _internal_set_kernel_run_id(uint64_t value);
  public:

  // uint64 command_id = 2;
  void clear_command_id();
  uint64_t command_id() const;
  void set_command_id(uint64_t value);
  private:
  uint64_t _internal_command_id() const;
  void _internal_set_command_id(uint64_t value);
  public:

  // uint64 start = 5;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // int32 dev = 6;
  void clear_dev();
  int32_t dev() const;
  void set_dev(int32_t value);
  private:
  int32_t _internal_dev() const;
  void _internal_set_dev(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.scheduled_kernel_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _input_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > input_sizes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _input_sizes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _output_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > output_sizes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _output_sizes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cpu_transfers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cpu_transfers_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t > gpu_transfers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ud_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impl_name_;
    uint64_t kernel_run_id_;
    uint64_t command_id_;
    uint64_t start_;
    int32_t dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gc_request_free_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gc_request_free_stat_t) */ {
 public:
  inline gc_request_free_stat_t() : gc_request_free_stat_t(nullptr) {}
  ~gc_request_free_stat_t() override;
  explicit PROTOBUF_CONSTEXPR gc_request_free_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gc_request_free_stat_t(const gc_request_free_stat_t& from);
  gc_request_free_stat_t(gc_request_free_stat_t&& from) noexcept
    : gc_request_free_stat_t() {
    *this = ::std::move(from);
  }

  inline gc_request_free_stat_t& operator=(const gc_request_free_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gc_request_free_stat_t& operator=(gc_request_free_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gc_request_free_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gc_request_free_stat_t* internal_default_instance() {
    return reinterpret_cast<const gc_request_free_stat_t*>(
               &_gc_request_free_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(gc_request_free_stat_t& a, gc_request_free_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gc_request_free_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gc_request_free_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gc_request_free_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gc_request_free_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gc_request_free_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gc_request_free_stat_t& from) {
    gc_request_free_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gc_request_free_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gc_request_free_stat_t";
  }
  protected:
  explicit gc_request_free_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBytesFieldNumber = 2,
    kTidFieldNumber = 1,
  };
  // uint64 num_bytes = 2;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // int32 tid = 1;
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gc_request_free_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t num_bytes_;
    int32_t tid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gc_request_evict_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gc_request_evict_stat_t) */ {
 public:
  inline gc_request_evict_stat_t() : gc_request_evict_stat_t(nullptr) {}
  ~gc_request_evict_stat_t() override;
  explicit PROTOBUF_CONSTEXPR gc_request_evict_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gc_request_evict_stat_t(const gc_request_evict_stat_t& from);
  gc_request_evict_stat_t(gc_request_evict_stat_t&& from) noexcept
    : gc_request_evict_stat_t() {
    *this = ::std::move(from);
  }

  inline gc_request_evict_stat_t& operator=(const gc_request_evict_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gc_request_evict_stat_t& operator=(gc_request_evict_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gc_request_evict_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gc_request_evict_stat_t* internal_default_instance() {
    return reinterpret_cast<const gc_request_evict_stat_t*>(
               &_gc_request_evict_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(gc_request_evict_stat_t& a, gc_request_evict_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gc_request_evict_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gc_request_evict_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gc_request_evict_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gc_request_evict_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gc_request_evict_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gc_request_evict_stat_t& from) {
    gc_request_evict_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gc_request_evict_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gc_request_evict_stat_t";
  }
  protected:
  explicit gc_request_evict_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBytesFieldNumber = 2,
    kTidFieldNumber = 1,
  };
  // uint64 num_bytes = 2;
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // int32 tid = 1;
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gc_request_evict_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t num_bytes_;
    int32_t tid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gc_request_stat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gc_request_stat_t) */ {
 public:
  inline gc_request_stat_t() : gc_request_stat_t(nullptr) {}
  ~gc_request_stat_t() override;
  explicit PROTOBUF_CONSTEXPR gc_request_stat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gc_request_stat_t(const gc_request_stat_t& from);
  gc_request_stat_t(gc_request_stat_t&& from) noexcept
    : gc_request_stat_t() {
    *this = ::std::move(from);
  }

  inline gc_request_stat_t& operator=(const gc_request_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gc_request_stat_t& operator=(gc_request_stat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gc_request_stat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gc_request_stat_t* internal_default_instance() {
    return reinterpret_cast<const gc_request_stat_t*>(
               &_gc_request_stat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(gc_request_stat_t& a, gc_request_stat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gc_request_stat_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gc_request_stat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gc_request_stat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gc_request_stat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gc_request_stat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gc_request_stat_t& from) {
    gc_request_stat_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gc_request_stat_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gc_request_stat_t";
  }
  protected:
  explicit gc_request_stat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFreeFieldNumber = 2,
    kToEvictFieldNumber = 3,
    kKernelRunIdFieldNumber = 4,
    kFreeMemoryUsedFieldNumber = 5,
    kDevFieldNumber = 1,
  };
  // repeated .bbts.gc_request_free_stat_t to_free = 2;
  int to_free_size() const;
  private:
  int _internal_to_free_size() const;
  public:
  void clear_to_free();
  ::bbts::gc_request_free_stat_t* mutable_to_free(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_free_stat_t >*
      mutable_to_free();
  private:
  const ::bbts::gc_request_free_stat_t& _internal_to_free(int index) const;
  ::bbts::gc_request_free_stat_t* _internal_add_to_free();
  public:
  const ::bbts::gc_request_free_stat_t& to_free(int index) const;
  ::bbts::gc_request_free_stat_t* add_to_free();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_free_stat_t >&
      to_free() const;

  // repeated .bbts.gc_request_evict_stat_t to_evict = 3;
  int to_evict_size() const;
  private:
  int _internal_to_evict_size() const;
  public:
  void clear_to_evict();
  ::bbts::gc_request_evict_stat_t* mutable_to_evict(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_evict_stat_t >*
      mutable_to_evict();
  private:
  const ::bbts::gc_request_evict_stat_t& _internal_to_evict(int index) const;
  ::bbts::gc_request_evict_stat_t* _internal_add_to_evict();
  public:
  const ::bbts::gc_request_evict_stat_t& to_evict(int index) const;
  ::bbts::gc_request_evict_stat_t* add_to_evict();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_evict_stat_t >&
      to_evict() const;

  // uint64 kernel_run_id = 4;
  void clear_kernel_run_id();
  uint64_t kernel_run_id() const;
  void set_kernel_run_id(uint64_t value);
  private:
  uint64_t _internal_kernel_run_id() const;
  void _internal_set_kernel_run_id(uint64_t value);
  public:

  // uint64 free_memory_used = 5;
  void clear_free_memory_used();
  uint64_t free_memory_used() const;
  void set_free_memory_used(uint64_t value);
  private:
  uint64_t _internal_free_memory_used() const;
  void _internal_set_free_memory_used(uint64_t value);
  public:

  // int32 dev = 1;
  void clear_dev();
  int32_t dev() const;
  void set_dev(int32_t value);
  private:
  int32_t _internal_dev() const;
  void _internal_set_dev(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gc_request_stat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_free_stat_t > to_free_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_evict_stat_t > to_evict_;
    uint64_t kernel_run_id_;
    uint64_t free_memory_used_;
    int32_t dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gpu_device_log_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gpu_device_log_t) */ {
 public:
  inline gpu_device_log_t() : gpu_device_log_t(nullptr) {}
  ~gpu_device_log_t() override;
  explicit PROTOBUF_CONSTEXPR gpu_device_log_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gpu_device_log_t(const gpu_device_log_t& from);
  gpu_device_log_t(gpu_device_log_t&& from) noexcept
    : gpu_device_log_t() {
    *this = ::std::move(from);
  }

  inline gpu_device_log_t& operator=(const gpu_device_log_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gpu_device_log_t& operator=(gpu_device_log_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gpu_device_log_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gpu_device_log_t* internal_default_instance() {
    return reinterpret_cast<const gpu_device_log_t*>(
               &_gpu_device_log_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(gpu_device_log_t& a, gpu_device_log_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gpu_device_log_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gpu_device_log_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gpu_device_log_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gpu_device_log_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gpu_device_log_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gpu_device_log_t& from) {
    gpu_device_log_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gpu_device_log_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gpu_device_log_t";
  }
  protected:
  explicit gpu_device_log_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelsStatsFieldNumber = 2,
    kGpu2GpuTransferStatsFieldNumber = 3,
    kCpu2GpuTransferStatsFieldNumber = 4,
    kFreeTensorStatsFieldNumber = 5,
    kEvictedTensorStatsFieldNumber = 6,
    kKernelsScheduledFieldNumber = 7,
    kGcScheduledFieldNumber = 8,
    kNumDevicesFieldNumber = 1,
  };
  // repeated .bbts.kernel_run_stats_t kernels_stats = 2;
  int kernels_stats_size() const;
  private:
  int _internal_kernels_stats_size() const;
  public:
  void clear_kernels_stats();
  ::bbts::kernel_run_stats_t* mutable_kernels_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::kernel_run_stats_t >*
      mutable_kernels_stats();
  private:
  const ::bbts::kernel_run_stats_t& _internal_kernels_stats(int index) const;
  ::bbts::kernel_run_stats_t* _internal_add_kernels_stats();
  public:
  const ::bbts::kernel_run_stats_t& kernels_stats(int index) const;
  ::bbts::kernel_run_stats_t* add_kernels_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::kernel_run_stats_t >&
      kernels_stats() const;

  // repeated .bbts.gpu_to_gpu_stat_t gpu2gpu_transfer_stats = 3;
  int gpu2gpu_transfer_stats_size() const;
  private:
  int _internal_gpu2gpu_transfer_stats_size() const;
  public:
  void clear_gpu2gpu_transfer_stats();
  ::bbts::gpu_to_gpu_stat_t* mutable_gpu2gpu_transfer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t >*
      mutable_gpu2gpu_transfer_stats();
  private:
  const ::bbts::gpu_to_gpu_stat_t& _internal_gpu2gpu_transfer_stats(int index) const;
  ::bbts::gpu_to_gpu_stat_t* _internal_add_gpu2gpu_transfer_stats();
  public:
  const ::bbts::gpu_to_gpu_stat_t& gpu2gpu_transfer_stats(int index) const;
  ::bbts::gpu_to_gpu_stat_t* add_gpu2gpu_transfer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t >&
      gpu2gpu_transfer_stats() const;

  // repeated .bbts.cpu_to_gpu_stat_t cpu2gpu_transfer_stats = 4;
  int cpu2gpu_transfer_stats_size() const;
  private:
  int _internal_cpu2gpu_transfer_stats_size() const;
  public:
  void clear_cpu2gpu_transfer_stats();
  ::bbts::cpu_to_gpu_stat_t* mutable_cpu2gpu_transfer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::cpu_to_gpu_stat_t >*
      mutable_cpu2gpu_transfer_stats();
  private:
  const ::bbts::cpu_to_gpu_stat_t& _internal_cpu2gpu_transfer_stats(int index) const;
  ::bbts::cpu_to_gpu_stat_t* _internal_add_cpu2gpu_transfer_stats();
  public:
  const ::bbts::cpu_to_gpu_stat_t& cpu2gpu_transfer_stats(int index) const;
  ::bbts::cpu_to_gpu_stat_t* add_cpu2gpu_transfer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::cpu_to_gpu_stat_t >&
      cpu2gpu_transfer_stats() const;

  // repeated .bbts.tensor_freed_stat_t free_tensor_stats = 5;
  int free_tensor_stats_size() const;
  private:
  int _internal_free_tensor_stats_size() const;
  public:
  void clear_free_tensor_stats();
  ::bbts::tensor_freed_stat_t* mutable_free_tensor_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_freed_stat_t >*
      mutable_free_tensor_stats();
  private:
  const ::bbts::tensor_freed_stat_t& _internal_free_tensor_stats(int index) const;
  ::bbts::tensor_freed_stat_t* _internal_add_free_tensor_stats();
  public:
  const ::bbts::tensor_freed_stat_t& free_tensor_stats(int index) const;
  ::bbts::tensor_freed_stat_t* add_free_tensor_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_freed_stat_t >&
      free_tensor_stats() const;

  // repeated .bbts.tensor_evicted_stat_t evicted_tensor_stats = 6;
  int evicted_tensor_stats_size() const;
  private:
  int _internal_evicted_tensor_stats_size() const;
  public:
  void clear_evicted_tensor_stats();
  ::bbts::tensor_evicted_stat_t* mutable_evicted_tensor_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_evicted_stat_t >*
      mutable_evicted_tensor_stats();
  private:
  const ::bbts::tensor_evicted_stat_t& _internal_evicted_tensor_stats(int index) const;
  ::bbts::tensor_evicted_stat_t* _internal_add_evicted_tensor_stats();
  public:
  const ::bbts::tensor_evicted_stat_t& evicted_tensor_stats(int index) const;
  ::bbts::tensor_evicted_stat_t* add_evicted_tensor_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_evicted_stat_t >&
      evicted_tensor_stats() const;

  // repeated .bbts.scheduled_kernel_stat_t kernels_scheduled = 7;
  int kernels_scheduled_size() const;
  private:
  int _internal_kernels_scheduled_size() const;
  public:
  void clear_kernels_scheduled();
  ::bbts::scheduled_kernel_stat_t* mutable_kernels_scheduled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t >*
      mutable_kernels_scheduled();
  private:
  const ::bbts::scheduled_kernel_stat_t& _internal_kernels_scheduled(int index) const;
  ::bbts::scheduled_kernel_stat_t* _internal_add_kernels_scheduled();
  public:
  const ::bbts::scheduled_kernel_stat_t& kernels_scheduled(int index) const;
  ::bbts::scheduled_kernel_stat_t* add_kernels_scheduled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t >&
      kernels_scheduled() const;

  // repeated .bbts.gc_request_stat_t gc_scheduled = 8;
  int gc_scheduled_size() const;
  private:
  int _internal_gc_scheduled_size() const;
  public:
  void clear_gc_scheduled();
  ::bbts::gc_request_stat_t* mutable_gc_scheduled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_stat_t >*
      mutable_gc_scheduled();
  private:
  const ::bbts::gc_request_stat_t& _internal_gc_scheduled(int index) const;
  ::bbts::gc_request_stat_t* _internal_add_gc_scheduled();
  public:
  const ::bbts::gc_request_stat_t& gc_scheduled(int index) const;
  ::bbts::gc_request_stat_t* add_gc_scheduled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_stat_t >&
      gc_scheduled() const;

  // uint32 num_devices = 1;
  void clear_num_devices();
  uint32_t num_devices() const;
  void set_num_devices(uint32_t value);
  private:
  uint32_t _internal_num_devices() const;
  void _internal_set_num_devices(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bbts.gpu_device_log_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::kernel_run_stats_t > kernels_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t > gpu2gpu_transfer_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::cpu_to_gpu_stat_t > cpu2gpu_transfer_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_freed_stat_t > free_tensor_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_evicted_stat_t > evicted_tensor_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t > kernels_scheduled_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_stat_t > gc_scheduled_;
    uint32_t num_devices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// -------------------------------------------------------------------

class gpu_profiler_log_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bbts.gpu_profiler_log_t) */ {
 public:
  inline gpu_profiler_log_t() : gpu_profiler_log_t(nullptr) {}
  ~gpu_profiler_log_t() override;
  explicit PROTOBUF_CONSTEXPR gpu_profiler_log_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gpu_profiler_log_t(const gpu_profiler_log_t& from);
  gpu_profiler_log_t(gpu_profiler_log_t&& from) noexcept
    : gpu_profiler_log_t() {
    *this = ::std::move(from);
  }

  inline gpu_profiler_log_t& operator=(const gpu_profiler_log_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline gpu_profiler_log_t& operator=(gpu_profiler_log_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gpu_profiler_log_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const gpu_profiler_log_t* internal_default_instance() {
    return reinterpret_cast<const gpu_profiler_log_t*>(
               &_gpu_profiler_log_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(gpu_profiler_log_t& a, gpu_profiler_log_t& b) {
    a.Swap(&b);
  }
  inline void Swap(gpu_profiler_log_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gpu_profiler_log_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gpu_profiler_log_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gpu_profiler_log_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gpu_profiler_log_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const gpu_profiler_log_t& from) {
    gpu_profiler_log_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gpu_profiler_log_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bbts.gpu_profiler_log_t";
  }
  protected:
  explicit gpu_profiler_log_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceLogsFieldNumber = 1,
  };
  // repeated .bbts.gpu_device_log_t device_logs = 1;
  int device_logs_size() const;
  private:
  int _internal_device_logs_size() const;
  public:
  void clear_device_logs();
  ::bbts::gpu_device_log_t* mutable_device_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_device_log_t >*
      mutable_device_logs();
  private:
  const ::bbts::gpu_device_log_t& _internal_device_logs(int index) const;
  ::bbts::gpu_device_log_t* _internal_add_device_logs();
  public:
  const ::bbts::gpu_device_log_t& device_logs(int index) const;
  ::bbts::gpu_device_log_t* add_device_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_device_log_t >&
      device_logs() const;

  // @@protoc_insertion_point(class_scope:bbts.gpu_profiler_log_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_device_log_t > device_logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fprofiler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// kernel_run_stats_t

// uint64 kernel_run_idx = 1;
inline void kernel_run_stats_t::clear_kernel_run_idx() {
  _impl_.kernel_run_idx_ = uint64_t{0u};
}
inline uint64_t kernel_run_stats_t::_internal_kernel_run_idx() const {
  return _impl_.kernel_run_idx_;
}
inline uint64_t kernel_run_stats_t::kernel_run_idx() const {
  // @@protoc_insertion_point(field_get:bbts.kernel_run_stats_t.kernel_run_idx)
  return _internal_kernel_run_idx();
}
inline void kernel_run_stats_t::_internal_set_kernel_run_idx(uint64_t value) {
  
  _impl_.kernel_run_idx_ = value;
}
inline void kernel_run_stats_t::set_kernel_run_idx(uint64_t value) {
  _internal_set_kernel_run_idx(value);
  // @@protoc_insertion_point(field_set:bbts.kernel_run_stats_t.kernel_run_idx)
}

// uint64 start = 2;
inline void kernel_run_stats_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t kernel_run_stats_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t kernel_run_stats_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.kernel_run_stats_t.start)
  return _internal_start();
}
inline void kernel_run_stats_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void kernel_run_stats_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.kernel_run_stats_t.start)
}

// uint64 end = 3;
inline void kernel_run_stats_t::clear_end() {
  _impl_.end_ = uint64_t{0u};
}
inline uint64_t kernel_run_stats_t::_internal_end() const {
  return _impl_.end_;
}
inline uint64_t kernel_run_stats_t::end() const {
  // @@protoc_insertion_point(field_get:bbts.kernel_run_stats_t.end)
  return _internal_end();
}
inline void kernel_run_stats_t::_internal_set_end(uint64_t value) {
  
  _impl_.end_ = value;
}
inline void kernel_run_stats_t::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:bbts.kernel_run_stats_t.end)
}

// -------------------------------------------------------------------

// gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t

// int32 tensor = 1;
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::clear_tensor() {
  _impl_.tensor_ = 0;
}
inline int32_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_tensor() const {
  return _impl_.tensor_;
}
inline int32_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::tensor() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.tensor)
  return _internal_tensor();
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_set_tensor(int32_t value) {
  
  _impl_.tensor_ = value;
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::set_tensor(int32_t value) {
  _internal_set_tensor(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.tensor)
}

// uint64 num_bytes = 2;
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.num_bytes)
}

// int32 src_dev = 3;
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::clear_src_dev() {
  _impl_.src_dev_ = 0;
}
inline int32_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_src_dev() const {
  return _impl_.src_dev_;
}
inline int32_t gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::src_dev() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.src_dev)
  return _internal_src_dev();
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::_internal_set_src_dev(int32_t value) {
  
  _impl_.src_dev_ = value;
}
inline void gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t::set_src_dev(int32_t value) {
  _internal_set_src_dev(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t.src_dev)
}

// -------------------------------------------------------------------

// gpu_to_gpu_stat_t

// uint64 start = 1;
inline void gpu_to_gpu_stat_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t gpu_to_gpu_stat_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t gpu_to_gpu_stat_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.start)
  return _internal_start();
}
inline void gpu_to_gpu_stat_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void gpu_to_gpu_stat_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.start)
}

// uint64 end = 2;
inline void gpu_to_gpu_stat_t::clear_end() {
  _impl_.end_ = uint64_t{0u};
}
inline uint64_t gpu_to_gpu_stat_t::_internal_end() const {
  return _impl_.end_;
}
inline uint64_t gpu_to_gpu_stat_t::end() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.end)
  return _internal_end();
}
inline void gpu_to_gpu_stat_t::_internal_set_end(uint64_t value) {
  
  _impl_.end_ = value;
}
inline void gpu_to_gpu_stat_t::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.end)
}

// repeated .bbts.gpu_to_gpu_stat_t.gpu_to_gpu_tensor_stat_t tensors = 3;
inline int gpu_to_gpu_stat_t::_internal_tensors_size() const {
  return _impl_.tensors_.size();
}
inline int gpu_to_gpu_stat_t::tensors_size() const {
  return _internal_tensors_size();
}
inline void gpu_to_gpu_stat_t::clear_tensors() {
  _impl_.tensors_.Clear();
}
inline ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* gpu_to_gpu_stat_t::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_to_gpu_stat_t.tensors)
  return _impl_.tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t >*
gpu_to_gpu_stat_t::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_to_gpu_stat_t.tensors)
  return &_impl_.tensors_;
}
inline const ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& gpu_to_gpu_stat_t::_internal_tensors(int index) const {
  return _impl_.tensors_.Get(index);
}
inline const ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t& gpu_to_gpu_stat_t::tensors(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.tensors)
  return _internal_tensors(index);
}
inline ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* gpu_to_gpu_stat_t::_internal_add_tensors() {
  return _impl_.tensors_.Add();
}
inline ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* gpu_to_gpu_stat_t::add_tensors() {
  ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t* _add = _internal_add_tensors();
  // @@protoc_insertion_point(field_add:bbts.gpu_to_gpu_stat_t.tensors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t_gpu_to_gpu_tensor_stat_t >&
gpu_to_gpu_stat_t::tensors() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_to_gpu_stat_t.tensors)
  return _impl_.tensors_;
}

// int32 source_dev = 4;
inline void gpu_to_gpu_stat_t::clear_source_dev() {
  _impl_.source_dev_ = 0;
}
inline int32_t gpu_to_gpu_stat_t::_internal_source_dev() const {
  return _impl_.source_dev_;
}
inline int32_t gpu_to_gpu_stat_t::source_dev() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.source_dev)
  return _internal_source_dev();
}
inline void gpu_to_gpu_stat_t::_internal_set_source_dev(int32_t value) {
  
  _impl_.source_dev_ = value;
}
inline void gpu_to_gpu_stat_t::set_source_dev(int32_t value) {
  _internal_set_source_dev(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.source_dev)
}

// int32 dst_dev = 5;
inline void gpu_to_gpu_stat_t::clear_dst_dev() {
  _impl_.dst_dev_ = 0;
}
inline int32_t gpu_to_gpu_stat_t::_internal_dst_dev() const {
  return _impl_.dst_dev_;
}
inline int32_t gpu_to_gpu_stat_t::dst_dev() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_to_gpu_stat_t.dst_dev)
  return _internal_dst_dev();
}
inline void gpu_to_gpu_stat_t::_internal_set_dst_dev(int32_t value) {
  
  _impl_.dst_dev_ = value;
}
inline void gpu_to_gpu_stat_t::set_dst_dev(int32_t value) {
  _internal_set_dst_dev(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_to_gpu_stat_t.dst_dev)
}

// -------------------------------------------------------------------

// cpu_to_gpu_stat_t

// uint64 start = 1;
inline void cpu_to_gpu_stat_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t cpu_to_gpu_stat_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t cpu_to_gpu_stat_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.cpu_to_gpu_stat_t.start)
  return _internal_start();
}
inline void cpu_to_gpu_stat_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void cpu_to_gpu_stat_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.cpu_to_gpu_stat_t.start)
}

// uint64 end = 2;
inline void cpu_to_gpu_stat_t::clear_end() {
  _impl_.end_ = uint64_t{0u};
}
inline uint64_t cpu_to_gpu_stat_t::_internal_end() const {
  return _impl_.end_;
}
inline uint64_t cpu_to_gpu_stat_t::end() const {
  // @@protoc_insertion_point(field_get:bbts.cpu_to_gpu_stat_t.end)
  return _internal_end();
}
inline void cpu_to_gpu_stat_t::_internal_set_end(uint64_t value) {
  
  _impl_.end_ = value;
}
inline void cpu_to_gpu_stat_t::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:bbts.cpu_to_gpu_stat_t.end)
}

// repeated int32 tensors = 3;
inline int cpu_to_gpu_stat_t::_internal_tensors_size() const {
  return _impl_.tensors_.size();
}
inline int cpu_to_gpu_stat_t::tensors_size() const {
  return _internal_tensors_size();
}
inline void cpu_to_gpu_stat_t::clear_tensors() {
  _impl_.tensors_.Clear();
}
inline int32_t cpu_to_gpu_stat_t::_internal_tensors(int index) const {
  return _impl_.tensors_.Get(index);
}
inline int32_t cpu_to_gpu_stat_t::tensors(int index) const {
  // @@protoc_insertion_point(field_get:bbts.cpu_to_gpu_stat_t.tensors)
  return _internal_tensors(index);
}
inline void cpu_to_gpu_stat_t::set_tensors(int index, int32_t value) {
  _impl_.tensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.cpu_to_gpu_stat_t.tensors)
}
inline void cpu_to_gpu_stat_t::_internal_add_tensors(int32_t value) {
  _impl_.tensors_.Add(value);
}
inline void cpu_to_gpu_stat_t::add_tensors(int32_t value) {
  _internal_add_tensors(value);
  // @@protoc_insertion_point(field_add:bbts.cpu_to_gpu_stat_t.tensors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
cpu_to_gpu_stat_t::_internal_tensors() const {
  return _impl_.tensors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
cpu_to_gpu_stat_t::tensors() const {
  // @@protoc_insertion_point(field_list:bbts.cpu_to_gpu_stat_t.tensors)
  return _internal_tensors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
cpu_to_gpu_stat_t::_internal_mutable_tensors() {
  return &_impl_.tensors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
cpu_to_gpu_stat_t::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:bbts.cpu_to_gpu_stat_t.tensors)
  return _internal_mutable_tensors();
}

// int32 dst_dev = 4;
inline void cpu_to_gpu_stat_t::clear_dst_dev() {
  _impl_.dst_dev_ = 0;
}
inline int32_t cpu_to_gpu_stat_t::_internal_dst_dev() const {
  return _impl_.dst_dev_;
}
inline int32_t cpu_to_gpu_stat_t::dst_dev() const {
  // @@protoc_insertion_point(field_get:bbts.cpu_to_gpu_stat_t.dst_dev)
  return _internal_dst_dev();
}
inline void cpu_to_gpu_stat_t::_internal_set_dst_dev(int32_t value) {
  
  _impl_.dst_dev_ = value;
}
inline void cpu_to_gpu_stat_t::set_dst_dev(int32_t value) {
  _internal_set_dst_dev(value);
  // @@protoc_insertion_point(field_set:bbts.cpu_to_gpu_stat_t.dst_dev)
}

// uint64 num_bytes = 5;
inline void cpu_to_gpu_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t cpu_to_gpu_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t cpu_to_gpu_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.cpu_to_gpu_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void cpu_to_gpu_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void cpu_to_gpu_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.cpu_to_gpu_stat_t.num_bytes)
}

// -------------------------------------------------------------------

// tensor_freed_stat_t

// uint64 start = 1;
inline void tensor_freed_stat_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t tensor_freed_stat_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t tensor_freed_stat_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_freed_stat_t.start)
  return _internal_start();
}
inline void tensor_freed_stat_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void tensor_freed_stat_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_freed_stat_t.start)
}

// int32 tensor = 2;
inline void tensor_freed_stat_t::clear_tensor() {
  _impl_.tensor_ = 0;
}
inline int32_t tensor_freed_stat_t::_internal_tensor() const {
  return _impl_.tensor_;
}
inline int32_t tensor_freed_stat_t::tensor() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_freed_stat_t.tensor)
  return _internal_tensor();
}
inline void tensor_freed_stat_t::_internal_set_tensor(int32_t value) {
  
  _impl_.tensor_ = value;
}
inline void tensor_freed_stat_t::set_tensor(int32_t value) {
  _internal_set_tensor(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_freed_stat_t.tensor)
}

// int32 dst_dev = 3;
inline void tensor_freed_stat_t::clear_dst_dev() {
  _impl_.dst_dev_ = 0;
}
inline int32_t tensor_freed_stat_t::_internal_dst_dev() const {
  return _impl_.dst_dev_;
}
inline int32_t tensor_freed_stat_t::dst_dev() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_freed_stat_t.dst_dev)
  return _internal_dst_dev();
}
inline void tensor_freed_stat_t::_internal_set_dst_dev(int32_t value) {
  
  _impl_.dst_dev_ = value;
}
inline void tensor_freed_stat_t::set_dst_dev(int32_t value) {
  _internal_set_dst_dev(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_freed_stat_t.dst_dev)
}

// uint64 num_bytes = 4;
inline void tensor_freed_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t tensor_freed_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t tensor_freed_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_freed_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void tensor_freed_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void tensor_freed_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_freed_stat_t.num_bytes)
}

// -------------------------------------------------------------------

// tensor_evicted_stat_t

// uint64 start = 1;
inline void tensor_evicted_stat_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t tensor_evicted_stat_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t tensor_evicted_stat_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_evicted_stat_t.start)
  return _internal_start();
}
inline void tensor_evicted_stat_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void tensor_evicted_stat_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_evicted_stat_t.start)
}

// uint64 end = 2;
inline void tensor_evicted_stat_t::clear_end() {
  _impl_.end_ = uint64_t{0u};
}
inline uint64_t tensor_evicted_stat_t::_internal_end() const {
  return _impl_.end_;
}
inline uint64_t tensor_evicted_stat_t::end() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_evicted_stat_t.end)
  return _internal_end();
}
inline void tensor_evicted_stat_t::_internal_set_end(uint64_t value) {
  
  _impl_.end_ = value;
}
inline void tensor_evicted_stat_t::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_evicted_stat_t.end)
}

// int32 tensor = 3;
inline void tensor_evicted_stat_t::clear_tensor() {
  _impl_.tensor_ = 0;
}
inline int32_t tensor_evicted_stat_t::_internal_tensor() const {
  return _impl_.tensor_;
}
inline int32_t tensor_evicted_stat_t::tensor() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_evicted_stat_t.tensor)
  return _internal_tensor();
}
inline void tensor_evicted_stat_t::_internal_set_tensor(int32_t value) {
  
  _impl_.tensor_ = value;
}
inline void tensor_evicted_stat_t::set_tensor(int32_t value) {
  _internal_set_tensor(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_evicted_stat_t.tensor)
}

// int32 dst_dev = 4;
inline void tensor_evicted_stat_t::clear_dst_dev() {
  _impl_.dst_dev_ = 0;
}
inline int32_t tensor_evicted_stat_t::_internal_dst_dev() const {
  return _impl_.dst_dev_;
}
inline int32_t tensor_evicted_stat_t::dst_dev() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_evicted_stat_t.dst_dev)
  return _internal_dst_dev();
}
inline void tensor_evicted_stat_t::_internal_set_dst_dev(int32_t value) {
  
  _impl_.dst_dev_ = value;
}
inline void tensor_evicted_stat_t::set_dst_dev(int32_t value) {
  _internal_set_dst_dev(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_evicted_stat_t.dst_dev)
}

// uint64 num_bytes = 5;
inline void tensor_evicted_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t tensor_evicted_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t tensor_evicted_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.tensor_evicted_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void tensor_evicted_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void tensor_evicted_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.tensor_evicted_stat_t.num_bytes)
}

// -------------------------------------------------------------------

// scheduled_kernel_stat_t_gpu_transfer_stat_t

// int32 src_dev = 1;
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::clear_src_dev() {
  _impl_.src_dev_ = 0;
}
inline int32_t scheduled_kernel_stat_t_gpu_transfer_stat_t::_internal_src_dev() const {
  return _impl_.src_dev_;
}
inline int32_t scheduled_kernel_stat_t_gpu_transfer_stat_t::src_dev() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t.src_dev)
  return _internal_src_dev();
}
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::_internal_set_src_dev(int32_t value) {
  
  _impl_.src_dev_ = value;
}
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::set_src_dev(int32_t value) {
  _internal_set_src_dev(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t.src_dev)
}

// int32 tid = 2;
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::clear_tid() {
  _impl_.tid_ = 0;
}
inline int32_t scheduled_kernel_stat_t_gpu_transfer_stat_t::_internal_tid() const {
  return _impl_.tid_;
}
inline int32_t scheduled_kernel_stat_t_gpu_transfer_stat_t::tid() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t.tid)
  return _internal_tid();
}
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::_internal_set_tid(int32_t value) {
  
  _impl_.tid_ = value;
}
inline void scheduled_kernel_stat_t_gpu_transfer_stat_t::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t.tid)
}

// -------------------------------------------------------------------

// scheduled_kernel_stat_t

// uint64 kernel_run_id = 1;
inline void scheduled_kernel_stat_t::clear_kernel_run_id() {
  _impl_.kernel_run_id_ = uint64_t{0u};
}
inline uint64_t scheduled_kernel_stat_t::_internal_kernel_run_id() const {
  return _impl_.kernel_run_id_;
}
inline uint64_t scheduled_kernel_stat_t::kernel_run_id() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.kernel_run_id)
  return _internal_kernel_run_id();
}
inline void scheduled_kernel_stat_t::_internal_set_kernel_run_id(uint64_t value) {
  
  _impl_.kernel_run_id_ = value;
}
inline void scheduled_kernel_stat_t::set_kernel_run_id(uint64_t value) {
  _internal_set_kernel_run_id(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.kernel_run_id)
}

// uint64 command_id = 2;
inline void scheduled_kernel_stat_t::clear_command_id() {
  _impl_.command_id_ = uint64_t{0u};
}
inline uint64_t scheduled_kernel_stat_t::_internal_command_id() const {
  return _impl_.command_id_;
}
inline uint64_t scheduled_kernel_stat_t::command_id() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.command_id)
  return _internal_command_id();
}
inline void scheduled_kernel_stat_t::_internal_set_command_id(uint64_t value) {
  
  _impl_.command_id_ = value;
}
inline void scheduled_kernel_stat_t::set_command_id(uint64_t value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.command_id)
}

// string ud_name = 3;
inline void scheduled_kernel_stat_t::clear_ud_name() {
  _impl_.ud_name_.ClearToEmpty();
}
inline const std::string& scheduled_kernel_stat_t::ud_name() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.ud_name)
  return _internal_ud_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void scheduled_kernel_stat_t::set_ud_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ud_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.ud_name)
}
inline std::string* scheduled_kernel_stat_t::mutable_ud_name() {
  std::string* _s = _internal_mutable_ud_name();
  // @@protoc_insertion_point(field_mutable:bbts.scheduled_kernel_stat_t.ud_name)
  return _s;
}
inline const std::string& scheduled_kernel_stat_t::_internal_ud_name() const {
  return _impl_.ud_name_.Get();
}
inline void scheduled_kernel_stat_t::_internal_set_ud_name(const std::string& value) {
  
  _impl_.ud_name_.Set(value, GetArenaForAllocation());
}
inline std::string* scheduled_kernel_stat_t::_internal_mutable_ud_name() {
  
  return _impl_.ud_name_.Mutable(GetArenaForAllocation());
}
inline std::string* scheduled_kernel_stat_t::release_ud_name() {
  // @@protoc_insertion_point(field_release:bbts.scheduled_kernel_stat_t.ud_name)
  return _impl_.ud_name_.Release();
}
inline void scheduled_kernel_stat_t::set_allocated_ud_name(std::string* ud_name) {
  if (ud_name != nullptr) {
    
  } else {
    
  }
  _impl_.ud_name_.SetAllocated(ud_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ud_name_.IsDefault()) {
    _impl_.ud_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bbts.scheduled_kernel_stat_t.ud_name)
}

// string impl_name = 4;
inline void scheduled_kernel_stat_t::clear_impl_name() {
  _impl_.impl_name_.ClearToEmpty();
}
inline const std::string& scheduled_kernel_stat_t::impl_name() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.impl_name)
  return _internal_impl_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void scheduled_kernel_stat_t::set_impl_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.impl_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.impl_name)
}
inline std::string* scheduled_kernel_stat_t::mutable_impl_name() {
  std::string* _s = _internal_mutable_impl_name();
  // @@protoc_insertion_point(field_mutable:bbts.scheduled_kernel_stat_t.impl_name)
  return _s;
}
inline const std::string& scheduled_kernel_stat_t::_internal_impl_name() const {
  return _impl_.impl_name_.Get();
}
inline void scheduled_kernel_stat_t::_internal_set_impl_name(const std::string& value) {
  
  _impl_.impl_name_.Set(value, GetArenaForAllocation());
}
inline std::string* scheduled_kernel_stat_t::_internal_mutable_impl_name() {
  
  return _impl_.impl_name_.Mutable(GetArenaForAllocation());
}
inline std::string* scheduled_kernel_stat_t::release_impl_name() {
  // @@protoc_insertion_point(field_release:bbts.scheduled_kernel_stat_t.impl_name)
  return _impl_.impl_name_.Release();
}
inline void scheduled_kernel_stat_t::set_allocated_impl_name(std::string* impl_name) {
  if (impl_name != nullptr) {
    
  } else {
    
  }
  _impl_.impl_name_.SetAllocated(impl_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.impl_name_.IsDefault()) {
    _impl_.impl_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bbts.scheduled_kernel_stat_t.impl_name)
}

// uint64 start = 5;
inline void scheduled_kernel_stat_t::clear_start() {
  _impl_.start_ = uint64_t{0u};
}
inline uint64_t scheduled_kernel_stat_t::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t scheduled_kernel_stat_t::start() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.start)
  return _internal_start();
}
inline void scheduled_kernel_stat_t::_internal_set_start(uint64_t value) {
  
  _impl_.start_ = value;
}
inline void scheduled_kernel_stat_t::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.start)
}

// int32 dev = 6;
inline void scheduled_kernel_stat_t::clear_dev() {
  _impl_.dev_ = 0;
}
inline int32_t scheduled_kernel_stat_t::_internal_dev() const {
  return _impl_.dev_;
}
inline int32_t scheduled_kernel_stat_t::dev() const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.dev)
  return _internal_dev();
}
inline void scheduled_kernel_stat_t::_internal_set_dev(int32_t value) {
  
  _impl_.dev_ = value;
}
inline void scheduled_kernel_stat_t::set_dev(int32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.dev)
}

// repeated int32 input = 7;
inline int scheduled_kernel_stat_t::_internal_input_size() const {
  return _impl_.input_.size();
}
inline int scheduled_kernel_stat_t::input_size() const {
  return _internal_input_size();
}
inline void scheduled_kernel_stat_t::clear_input() {
  _impl_.input_.Clear();
}
inline int32_t scheduled_kernel_stat_t::_internal_input(int index) const {
  return _impl_.input_.Get(index);
}
inline int32_t scheduled_kernel_stat_t::input(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.input)
  return _internal_input(index);
}
inline void scheduled_kernel_stat_t::set_input(int index, int32_t value) {
  _impl_.input_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.input)
}
inline void scheduled_kernel_stat_t::_internal_add_input(int32_t value) {
  _impl_.input_.Add(value);
}
inline void scheduled_kernel_stat_t::add_input(int32_t value) {
  _internal_add_input(value);
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::_internal_input() const {
  return _impl_.input_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::input() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.input)
  return _internal_input();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::_internal_mutable_input() {
  return &_impl_.input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.input)
  return _internal_mutable_input();
}

// repeated uint64 input_sizes = 8;
inline int scheduled_kernel_stat_t::_internal_input_sizes_size() const {
  return _impl_.input_sizes_.size();
}
inline int scheduled_kernel_stat_t::input_sizes_size() const {
  return _internal_input_sizes_size();
}
inline void scheduled_kernel_stat_t::clear_input_sizes() {
  _impl_.input_sizes_.Clear();
}
inline uint64_t scheduled_kernel_stat_t::_internal_input_sizes(int index) const {
  return _impl_.input_sizes_.Get(index);
}
inline uint64_t scheduled_kernel_stat_t::input_sizes(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.input_sizes)
  return _internal_input_sizes(index);
}
inline void scheduled_kernel_stat_t::set_input_sizes(int index, uint64_t value) {
  _impl_.input_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.input_sizes)
}
inline void scheduled_kernel_stat_t::_internal_add_input_sizes(uint64_t value) {
  _impl_.input_sizes_.Add(value);
}
inline void scheduled_kernel_stat_t::add_input_sizes(uint64_t value) {
  _internal_add_input_sizes(value);
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.input_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
scheduled_kernel_stat_t::_internal_input_sizes() const {
  return _impl_.input_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
scheduled_kernel_stat_t::input_sizes() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.input_sizes)
  return _internal_input_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
scheduled_kernel_stat_t::_internal_mutable_input_sizes() {
  return &_impl_.input_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
scheduled_kernel_stat_t::mutable_input_sizes() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.input_sizes)
  return _internal_mutable_input_sizes();
}

// repeated int32 output = 9;
inline int scheduled_kernel_stat_t::_internal_output_size() const {
  return _impl_.output_.size();
}
inline int scheduled_kernel_stat_t::output_size() const {
  return _internal_output_size();
}
inline void scheduled_kernel_stat_t::clear_output() {
  _impl_.output_.Clear();
}
inline int32_t scheduled_kernel_stat_t::_internal_output(int index) const {
  return _impl_.output_.Get(index);
}
inline int32_t scheduled_kernel_stat_t::output(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.output)
  return _internal_output(index);
}
inline void scheduled_kernel_stat_t::set_output(int index, int32_t value) {
  _impl_.output_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.output)
}
inline void scheduled_kernel_stat_t::_internal_add_output(int32_t value) {
  _impl_.output_.Add(value);
}
inline void scheduled_kernel_stat_t::add_output(int32_t value) {
  _internal_add_output(value);
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::_internal_output() const {
  return _impl_.output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::output() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.output)
  return _internal_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::_internal_mutable_output() {
  return &_impl_.output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.output)
  return _internal_mutable_output();
}

// repeated uint64 output_sizes = 10;
inline int scheduled_kernel_stat_t::_internal_output_sizes_size() const {
  return _impl_.output_sizes_.size();
}
inline int scheduled_kernel_stat_t::output_sizes_size() const {
  return _internal_output_sizes_size();
}
inline void scheduled_kernel_stat_t::clear_output_sizes() {
  _impl_.output_sizes_.Clear();
}
inline uint64_t scheduled_kernel_stat_t::_internal_output_sizes(int index) const {
  return _impl_.output_sizes_.Get(index);
}
inline uint64_t scheduled_kernel_stat_t::output_sizes(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.output_sizes)
  return _internal_output_sizes(index);
}
inline void scheduled_kernel_stat_t::set_output_sizes(int index, uint64_t value) {
  _impl_.output_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.output_sizes)
}
inline void scheduled_kernel_stat_t::_internal_add_output_sizes(uint64_t value) {
  _impl_.output_sizes_.Add(value);
}
inline void scheduled_kernel_stat_t::add_output_sizes(uint64_t value) {
  _internal_add_output_sizes(value);
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.output_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
scheduled_kernel_stat_t::_internal_output_sizes() const {
  return _impl_.output_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
scheduled_kernel_stat_t::output_sizes() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.output_sizes)
  return _internal_output_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
scheduled_kernel_stat_t::_internal_mutable_output_sizes() {
  return &_impl_.output_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
scheduled_kernel_stat_t::mutable_output_sizes() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.output_sizes)
  return _internal_mutable_output_sizes();
}

// repeated int32 cpu_transfers = 11;
inline int scheduled_kernel_stat_t::_internal_cpu_transfers_size() const {
  return _impl_.cpu_transfers_.size();
}
inline int scheduled_kernel_stat_t::cpu_transfers_size() const {
  return _internal_cpu_transfers_size();
}
inline void scheduled_kernel_stat_t::clear_cpu_transfers() {
  _impl_.cpu_transfers_.Clear();
}
inline int32_t scheduled_kernel_stat_t::_internal_cpu_transfers(int index) const {
  return _impl_.cpu_transfers_.Get(index);
}
inline int32_t scheduled_kernel_stat_t::cpu_transfers(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.cpu_transfers)
  return _internal_cpu_transfers(index);
}
inline void scheduled_kernel_stat_t::set_cpu_transfers(int index, int32_t value) {
  _impl_.cpu_transfers_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.scheduled_kernel_stat_t.cpu_transfers)
}
inline void scheduled_kernel_stat_t::_internal_add_cpu_transfers(int32_t value) {
  _impl_.cpu_transfers_.Add(value);
}
inline void scheduled_kernel_stat_t::add_cpu_transfers(int32_t value) {
  _internal_add_cpu_transfers(value);
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.cpu_transfers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::_internal_cpu_transfers() const {
  return _impl_.cpu_transfers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
scheduled_kernel_stat_t::cpu_transfers() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.cpu_transfers)
  return _internal_cpu_transfers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::_internal_mutable_cpu_transfers() {
  return &_impl_.cpu_transfers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
scheduled_kernel_stat_t::mutable_cpu_transfers() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.cpu_transfers)
  return _internal_mutable_cpu_transfers();
}

// repeated .bbts.scheduled_kernel_stat_t.gpu_transfer_stat_t gpu_transfers = 12;
inline int scheduled_kernel_stat_t::_internal_gpu_transfers_size() const {
  return _impl_.gpu_transfers_.size();
}
inline int scheduled_kernel_stat_t::gpu_transfers_size() const {
  return _internal_gpu_transfers_size();
}
inline void scheduled_kernel_stat_t::clear_gpu_transfers() {
  _impl_.gpu_transfers_.Clear();
}
inline ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* scheduled_kernel_stat_t::mutable_gpu_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.scheduled_kernel_stat_t.gpu_transfers)
  return _impl_.gpu_transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t >*
scheduled_kernel_stat_t::mutable_gpu_transfers() {
  // @@protoc_insertion_point(field_mutable_list:bbts.scheduled_kernel_stat_t.gpu_transfers)
  return &_impl_.gpu_transfers_;
}
inline const ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t& scheduled_kernel_stat_t::_internal_gpu_transfers(int index) const {
  return _impl_.gpu_transfers_.Get(index);
}
inline const ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t& scheduled_kernel_stat_t::gpu_transfers(int index) const {
  // @@protoc_insertion_point(field_get:bbts.scheduled_kernel_stat_t.gpu_transfers)
  return _internal_gpu_transfers(index);
}
inline ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* scheduled_kernel_stat_t::_internal_add_gpu_transfers() {
  return _impl_.gpu_transfers_.Add();
}
inline ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* scheduled_kernel_stat_t::add_gpu_transfers() {
  ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t* _add = _internal_add_gpu_transfers();
  // @@protoc_insertion_point(field_add:bbts.scheduled_kernel_stat_t.gpu_transfers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t_gpu_transfer_stat_t >&
scheduled_kernel_stat_t::gpu_transfers() const {
  // @@protoc_insertion_point(field_list:bbts.scheduled_kernel_stat_t.gpu_transfers)
  return _impl_.gpu_transfers_;
}

// -------------------------------------------------------------------

// gc_request_free_stat_t

// int32 tid = 1;
inline void gc_request_free_stat_t::clear_tid() {
  _impl_.tid_ = 0;
}
inline int32_t gc_request_free_stat_t::_internal_tid() const {
  return _impl_.tid_;
}
inline int32_t gc_request_free_stat_t::tid() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_free_stat_t.tid)
  return _internal_tid();
}
inline void gc_request_free_stat_t::_internal_set_tid(int32_t value) {
  
  _impl_.tid_ = value;
}
inline void gc_request_free_stat_t::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_free_stat_t.tid)
}

// uint64 num_bytes = 2;
inline void gc_request_free_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t gc_request_free_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t gc_request_free_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_free_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void gc_request_free_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void gc_request_free_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_free_stat_t.num_bytes)
}

// -------------------------------------------------------------------

// gc_request_evict_stat_t

// int32 tid = 1;
inline void gc_request_evict_stat_t::clear_tid() {
  _impl_.tid_ = 0;
}
inline int32_t gc_request_evict_stat_t::_internal_tid() const {
  return _impl_.tid_;
}
inline int32_t gc_request_evict_stat_t::tid() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_evict_stat_t.tid)
  return _internal_tid();
}
inline void gc_request_evict_stat_t::_internal_set_tid(int32_t value) {
  
  _impl_.tid_ = value;
}
inline void gc_request_evict_stat_t::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_evict_stat_t.tid)
}

// uint64 num_bytes = 2;
inline void gc_request_evict_stat_t::clear_num_bytes() {
  _impl_.num_bytes_ = uint64_t{0u};
}
inline uint64_t gc_request_evict_stat_t::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline uint64_t gc_request_evict_stat_t::num_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_evict_stat_t.num_bytes)
  return _internal_num_bytes();
}
inline void gc_request_evict_stat_t::_internal_set_num_bytes(uint64_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void gc_request_evict_stat_t::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_evict_stat_t.num_bytes)
}

// -------------------------------------------------------------------

// gc_request_stat_t

// int32 dev = 1;
inline void gc_request_stat_t::clear_dev() {
  _impl_.dev_ = 0;
}
inline int32_t gc_request_stat_t::_internal_dev() const {
  return _impl_.dev_;
}
inline int32_t gc_request_stat_t::dev() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_stat_t.dev)
  return _internal_dev();
}
inline void gc_request_stat_t::_internal_set_dev(int32_t value) {
  
  _impl_.dev_ = value;
}
inline void gc_request_stat_t::set_dev(int32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_stat_t.dev)
}

// repeated .bbts.gc_request_free_stat_t to_free = 2;
inline int gc_request_stat_t::_internal_to_free_size() const {
  return _impl_.to_free_.size();
}
inline int gc_request_stat_t::to_free_size() const {
  return _internal_to_free_size();
}
inline void gc_request_stat_t::clear_to_free() {
  _impl_.to_free_.Clear();
}
inline ::bbts::gc_request_free_stat_t* gc_request_stat_t::mutable_to_free(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gc_request_stat_t.to_free)
  return _impl_.to_free_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_free_stat_t >*
gc_request_stat_t::mutable_to_free() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gc_request_stat_t.to_free)
  return &_impl_.to_free_;
}
inline const ::bbts::gc_request_free_stat_t& gc_request_stat_t::_internal_to_free(int index) const {
  return _impl_.to_free_.Get(index);
}
inline const ::bbts::gc_request_free_stat_t& gc_request_stat_t::to_free(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_stat_t.to_free)
  return _internal_to_free(index);
}
inline ::bbts::gc_request_free_stat_t* gc_request_stat_t::_internal_add_to_free() {
  return _impl_.to_free_.Add();
}
inline ::bbts::gc_request_free_stat_t* gc_request_stat_t::add_to_free() {
  ::bbts::gc_request_free_stat_t* _add = _internal_add_to_free();
  // @@protoc_insertion_point(field_add:bbts.gc_request_stat_t.to_free)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_free_stat_t >&
gc_request_stat_t::to_free() const {
  // @@protoc_insertion_point(field_list:bbts.gc_request_stat_t.to_free)
  return _impl_.to_free_;
}

// repeated .bbts.gc_request_evict_stat_t to_evict = 3;
inline int gc_request_stat_t::_internal_to_evict_size() const {
  return _impl_.to_evict_.size();
}
inline int gc_request_stat_t::to_evict_size() const {
  return _internal_to_evict_size();
}
inline void gc_request_stat_t::clear_to_evict() {
  _impl_.to_evict_.Clear();
}
inline ::bbts::gc_request_evict_stat_t* gc_request_stat_t::mutable_to_evict(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gc_request_stat_t.to_evict)
  return _impl_.to_evict_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_evict_stat_t >*
gc_request_stat_t::mutable_to_evict() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gc_request_stat_t.to_evict)
  return &_impl_.to_evict_;
}
inline const ::bbts::gc_request_evict_stat_t& gc_request_stat_t::_internal_to_evict(int index) const {
  return _impl_.to_evict_.Get(index);
}
inline const ::bbts::gc_request_evict_stat_t& gc_request_stat_t::to_evict(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_stat_t.to_evict)
  return _internal_to_evict(index);
}
inline ::bbts::gc_request_evict_stat_t* gc_request_stat_t::_internal_add_to_evict() {
  return _impl_.to_evict_.Add();
}
inline ::bbts::gc_request_evict_stat_t* gc_request_stat_t::add_to_evict() {
  ::bbts::gc_request_evict_stat_t* _add = _internal_add_to_evict();
  // @@protoc_insertion_point(field_add:bbts.gc_request_stat_t.to_evict)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_evict_stat_t >&
gc_request_stat_t::to_evict() const {
  // @@protoc_insertion_point(field_list:bbts.gc_request_stat_t.to_evict)
  return _impl_.to_evict_;
}

// uint64 kernel_run_id = 4;
inline void gc_request_stat_t::clear_kernel_run_id() {
  _impl_.kernel_run_id_ = uint64_t{0u};
}
inline uint64_t gc_request_stat_t::_internal_kernel_run_id() const {
  return _impl_.kernel_run_id_;
}
inline uint64_t gc_request_stat_t::kernel_run_id() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_stat_t.kernel_run_id)
  return _internal_kernel_run_id();
}
inline void gc_request_stat_t::_internal_set_kernel_run_id(uint64_t value) {
  
  _impl_.kernel_run_id_ = value;
}
inline void gc_request_stat_t::set_kernel_run_id(uint64_t value) {
  _internal_set_kernel_run_id(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_stat_t.kernel_run_id)
}

// uint64 free_memory_used = 5;
inline void gc_request_stat_t::clear_free_memory_used() {
  _impl_.free_memory_used_ = uint64_t{0u};
}
inline uint64_t gc_request_stat_t::_internal_free_memory_used() const {
  return _impl_.free_memory_used_;
}
inline uint64_t gc_request_stat_t::free_memory_used() const {
  // @@protoc_insertion_point(field_get:bbts.gc_request_stat_t.free_memory_used)
  return _internal_free_memory_used();
}
inline void gc_request_stat_t::_internal_set_free_memory_used(uint64_t value) {
  
  _impl_.free_memory_used_ = value;
}
inline void gc_request_stat_t::set_free_memory_used(uint64_t value) {
  _internal_set_free_memory_used(value);
  // @@protoc_insertion_point(field_set:bbts.gc_request_stat_t.free_memory_used)
}

// -------------------------------------------------------------------

// gpu_device_log_t

// uint32 num_devices = 1;
inline void gpu_device_log_t::clear_num_devices() {
  _impl_.num_devices_ = 0u;
}
inline uint32_t gpu_device_log_t::_internal_num_devices() const {
  return _impl_.num_devices_;
}
inline uint32_t gpu_device_log_t::num_devices() const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.num_devices)
  return _internal_num_devices();
}
inline void gpu_device_log_t::_internal_set_num_devices(uint32_t value) {
  
  _impl_.num_devices_ = value;
}
inline void gpu_device_log_t::set_num_devices(uint32_t value) {
  _internal_set_num_devices(value);
  // @@protoc_insertion_point(field_set:bbts.gpu_device_log_t.num_devices)
}

// repeated .bbts.kernel_run_stats_t kernels_stats = 2;
inline int gpu_device_log_t::_internal_kernels_stats_size() const {
  return _impl_.kernels_stats_.size();
}
inline int gpu_device_log_t::kernels_stats_size() const {
  return _internal_kernels_stats_size();
}
inline void gpu_device_log_t::clear_kernels_stats() {
  _impl_.kernels_stats_.Clear();
}
inline ::bbts::kernel_run_stats_t* gpu_device_log_t::mutable_kernels_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.kernels_stats)
  return _impl_.kernels_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::kernel_run_stats_t >*
gpu_device_log_t::mutable_kernels_stats() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.kernels_stats)
  return &_impl_.kernels_stats_;
}
inline const ::bbts::kernel_run_stats_t& gpu_device_log_t::_internal_kernels_stats(int index) const {
  return _impl_.kernels_stats_.Get(index);
}
inline const ::bbts::kernel_run_stats_t& gpu_device_log_t::kernels_stats(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.kernels_stats)
  return _internal_kernels_stats(index);
}
inline ::bbts::kernel_run_stats_t* gpu_device_log_t::_internal_add_kernels_stats() {
  return _impl_.kernels_stats_.Add();
}
inline ::bbts::kernel_run_stats_t* gpu_device_log_t::add_kernels_stats() {
  ::bbts::kernel_run_stats_t* _add = _internal_add_kernels_stats();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.kernels_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::kernel_run_stats_t >&
gpu_device_log_t::kernels_stats() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.kernels_stats)
  return _impl_.kernels_stats_;
}

// repeated .bbts.gpu_to_gpu_stat_t gpu2gpu_transfer_stats = 3;
inline int gpu_device_log_t::_internal_gpu2gpu_transfer_stats_size() const {
  return _impl_.gpu2gpu_transfer_stats_.size();
}
inline int gpu_device_log_t::gpu2gpu_transfer_stats_size() const {
  return _internal_gpu2gpu_transfer_stats_size();
}
inline void gpu_device_log_t::clear_gpu2gpu_transfer_stats() {
  _impl_.gpu2gpu_transfer_stats_.Clear();
}
inline ::bbts::gpu_to_gpu_stat_t* gpu_device_log_t::mutable_gpu2gpu_transfer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.gpu2gpu_transfer_stats)
  return _impl_.gpu2gpu_transfer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t >*
gpu_device_log_t::mutable_gpu2gpu_transfer_stats() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.gpu2gpu_transfer_stats)
  return &_impl_.gpu2gpu_transfer_stats_;
}
inline const ::bbts::gpu_to_gpu_stat_t& gpu_device_log_t::_internal_gpu2gpu_transfer_stats(int index) const {
  return _impl_.gpu2gpu_transfer_stats_.Get(index);
}
inline const ::bbts::gpu_to_gpu_stat_t& gpu_device_log_t::gpu2gpu_transfer_stats(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.gpu2gpu_transfer_stats)
  return _internal_gpu2gpu_transfer_stats(index);
}
inline ::bbts::gpu_to_gpu_stat_t* gpu_device_log_t::_internal_add_gpu2gpu_transfer_stats() {
  return _impl_.gpu2gpu_transfer_stats_.Add();
}
inline ::bbts::gpu_to_gpu_stat_t* gpu_device_log_t::add_gpu2gpu_transfer_stats() {
  ::bbts::gpu_to_gpu_stat_t* _add = _internal_add_gpu2gpu_transfer_stats();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.gpu2gpu_transfer_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_to_gpu_stat_t >&
gpu_device_log_t::gpu2gpu_transfer_stats() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.gpu2gpu_transfer_stats)
  return _impl_.gpu2gpu_transfer_stats_;
}

// repeated .bbts.cpu_to_gpu_stat_t cpu2gpu_transfer_stats = 4;
inline int gpu_device_log_t::_internal_cpu2gpu_transfer_stats_size() const {
  return _impl_.cpu2gpu_transfer_stats_.size();
}
inline int gpu_device_log_t::cpu2gpu_transfer_stats_size() const {
  return _internal_cpu2gpu_transfer_stats_size();
}
inline void gpu_device_log_t::clear_cpu2gpu_transfer_stats() {
  _impl_.cpu2gpu_transfer_stats_.Clear();
}
inline ::bbts::cpu_to_gpu_stat_t* gpu_device_log_t::mutable_cpu2gpu_transfer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.cpu2gpu_transfer_stats)
  return _impl_.cpu2gpu_transfer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::cpu_to_gpu_stat_t >*
gpu_device_log_t::mutable_cpu2gpu_transfer_stats() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.cpu2gpu_transfer_stats)
  return &_impl_.cpu2gpu_transfer_stats_;
}
inline const ::bbts::cpu_to_gpu_stat_t& gpu_device_log_t::_internal_cpu2gpu_transfer_stats(int index) const {
  return _impl_.cpu2gpu_transfer_stats_.Get(index);
}
inline const ::bbts::cpu_to_gpu_stat_t& gpu_device_log_t::cpu2gpu_transfer_stats(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.cpu2gpu_transfer_stats)
  return _internal_cpu2gpu_transfer_stats(index);
}
inline ::bbts::cpu_to_gpu_stat_t* gpu_device_log_t::_internal_add_cpu2gpu_transfer_stats() {
  return _impl_.cpu2gpu_transfer_stats_.Add();
}
inline ::bbts::cpu_to_gpu_stat_t* gpu_device_log_t::add_cpu2gpu_transfer_stats() {
  ::bbts::cpu_to_gpu_stat_t* _add = _internal_add_cpu2gpu_transfer_stats();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.cpu2gpu_transfer_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::cpu_to_gpu_stat_t >&
gpu_device_log_t::cpu2gpu_transfer_stats() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.cpu2gpu_transfer_stats)
  return _impl_.cpu2gpu_transfer_stats_;
}

// repeated .bbts.tensor_freed_stat_t free_tensor_stats = 5;
inline int gpu_device_log_t::_internal_free_tensor_stats_size() const {
  return _impl_.free_tensor_stats_.size();
}
inline int gpu_device_log_t::free_tensor_stats_size() const {
  return _internal_free_tensor_stats_size();
}
inline void gpu_device_log_t::clear_free_tensor_stats() {
  _impl_.free_tensor_stats_.Clear();
}
inline ::bbts::tensor_freed_stat_t* gpu_device_log_t::mutable_free_tensor_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.free_tensor_stats)
  return _impl_.free_tensor_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_freed_stat_t >*
gpu_device_log_t::mutable_free_tensor_stats() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.free_tensor_stats)
  return &_impl_.free_tensor_stats_;
}
inline const ::bbts::tensor_freed_stat_t& gpu_device_log_t::_internal_free_tensor_stats(int index) const {
  return _impl_.free_tensor_stats_.Get(index);
}
inline const ::bbts::tensor_freed_stat_t& gpu_device_log_t::free_tensor_stats(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.free_tensor_stats)
  return _internal_free_tensor_stats(index);
}
inline ::bbts::tensor_freed_stat_t* gpu_device_log_t::_internal_add_free_tensor_stats() {
  return _impl_.free_tensor_stats_.Add();
}
inline ::bbts::tensor_freed_stat_t* gpu_device_log_t::add_free_tensor_stats() {
  ::bbts::tensor_freed_stat_t* _add = _internal_add_free_tensor_stats();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.free_tensor_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_freed_stat_t >&
gpu_device_log_t::free_tensor_stats() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.free_tensor_stats)
  return _impl_.free_tensor_stats_;
}

// repeated .bbts.tensor_evicted_stat_t evicted_tensor_stats = 6;
inline int gpu_device_log_t::_internal_evicted_tensor_stats_size() const {
  return _impl_.evicted_tensor_stats_.size();
}
inline int gpu_device_log_t::evicted_tensor_stats_size() const {
  return _internal_evicted_tensor_stats_size();
}
inline void gpu_device_log_t::clear_evicted_tensor_stats() {
  _impl_.evicted_tensor_stats_.Clear();
}
inline ::bbts::tensor_evicted_stat_t* gpu_device_log_t::mutable_evicted_tensor_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.evicted_tensor_stats)
  return _impl_.evicted_tensor_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_evicted_stat_t >*
gpu_device_log_t::mutable_evicted_tensor_stats() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.evicted_tensor_stats)
  return &_impl_.evicted_tensor_stats_;
}
inline const ::bbts::tensor_evicted_stat_t& gpu_device_log_t::_internal_evicted_tensor_stats(int index) const {
  return _impl_.evicted_tensor_stats_.Get(index);
}
inline const ::bbts::tensor_evicted_stat_t& gpu_device_log_t::evicted_tensor_stats(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.evicted_tensor_stats)
  return _internal_evicted_tensor_stats(index);
}
inline ::bbts::tensor_evicted_stat_t* gpu_device_log_t::_internal_add_evicted_tensor_stats() {
  return _impl_.evicted_tensor_stats_.Add();
}
inline ::bbts::tensor_evicted_stat_t* gpu_device_log_t::add_evicted_tensor_stats() {
  ::bbts::tensor_evicted_stat_t* _add = _internal_add_evicted_tensor_stats();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.evicted_tensor_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::tensor_evicted_stat_t >&
gpu_device_log_t::evicted_tensor_stats() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.evicted_tensor_stats)
  return _impl_.evicted_tensor_stats_;
}

// repeated .bbts.scheduled_kernel_stat_t kernels_scheduled = 7;
inline int gpu_device_log_t::_internal_kernels_scheduled_size() const {
  return _impl_.kernels_scheduled_.size();
}
inline int gpu_device_log_t::kernels_scheduled_size() const {
  return _internal_kernels_scheduled_size();
}
inline void gpu_device_log_t::clear_kernels_scheduled() {
  _impl_.kernels_scheduled_.Clear();
}
inline ::bbts::scheduled_kernel_stat_t* gpu_device_log_t::mutable_kernels_scheduled(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.kernels_scheduled)
  return _impl_.kernels_scheduled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t >*
gpu_device_log_t::mutable_kernels_scheduled() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.kernels_scheduled)
  return &_impl_.kernels_scheduled_;
}
inline const ::bbts::scheduled_kernel_stat_t& gpu_device_log_t::_internal_kernels_scheduled(int index) const {
  return _impl_.kernels_scheduled_.Get(index);
}
inline const ::bbts::scheduled_kernel_stat_t& gpu_device_log_t::kernels_scheduled(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.kernels_scheduled)
  return _internal_kernels_scheduled(index);
}
inline ::bbts::scheduled_kernel_stat_t* gpu_device_log_t::_internal_add_kernels_scheduled() {
  return _impl_.kernels_scheduled_.Add();
}
inline ::bbts::scheduled_kernel_stat_t* gpu_device_log_t::add_kernels_scheduled() {
  ::bbts::scheduled_kernel_stat_t* _add = _internal_add_kernels_scheduled();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.kernels_scheduled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::scheduled_kernel_stat_t >&
gpu_device_log_t::kernels_scheduled() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.kernels_scheduled)
  return _impl_.kernels_scheduled_;
}

// repeated .bbts.gc_request_stat_t gc_scheduled = 8;
inline int gpu_device_log_t::_internal_gc_scheduled_size() const {
  return _impl_.gc_scheduled_.size();
}
inline int gpu_device_log_t::gc_scheduled_size() const {
  return _internal_gc_scheduled_size();
}
inline void gpu_device_log_t::clear_gc_scheduled() {
  _impl_.gc_scheduled_.Clear();
}
inline ::bbts::gc_request_stat_t* gpu_device_log_t::mutable_gc_scheduled(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_device_log_t.gc_scheduled)
  return _impl_.gc_scheduled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_stat_t >*
gpu_device_log_t::mutable_gc_scheduled() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_device_log_t.gc_scheduled)
  return &_impl_.gc_scheduled_;
}
inline const ::bbts::gc_request_stat_t& gpu_device_log_t::_internal_gc_scheduled(int index) const {
  return _impl_.gc_scheduled_.Get(index);
}
inline const ::bbts::gc_request_stat_t& gpu_device_log_t::gc_scheduled(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_device_log_t.gc_scheduled)
  return _internal_gc_scheduled(index);
}
inline ::bbts::gc_request_stat_t* gpu_device_log_t::_internal_add_gc_scheduled() {
  return _impl_.gc_scheduled_.Add();
}
inline ::bbts::gc_request_stat_t* gpu_device_log_t::add_gc_scheduled() {
  ::bbts::gc_request_stat_t* _add = _internal_add_gc_scheduled();
  // @@protoc_insertion_point(field_add:bbts.gpu_device_log_t.gc_scheduled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gc_request_stat_t >&
gpu_device_log_t::gc_scheduled() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_device_log_t.gc_scheduled)
  return _impl_.gc_scheduled_;
}

// -------------------------------------------------------------------

// gpu_profiler_log_t

// repeated .bbts.gpu_device_log_t device_logs = 1;
inline int gpu_profiler_log_t::_internal_device_logs_size() const {
  return _impl_.device_logs_.size();
}
inline int gpu_profiler_log_t::device_logs_size() const {
  return _internal_device_logs_size();
}
inline void gpu_profiler_log_t::clear_device_logs() {
  _impl_.device_logs_.Clear();
}
inline ::bbts::gpu_device_log_t* gpu_profiler_log_t::mutable_device_logs(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.gpu_profiler_log_t.device_logs)
  return _impl_.device_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_device_log_t >*
gpu_profiler_log_t::mutable_device_logs() {
  // @@protoc_insertion_point(field_mutable_list:bbts.gpu_profiler_log_t.device_logs)
  return &_impl_.device_logs_;
}
inline const ::bbts::gpu_device_log_t& gpu_profiler_log_t::_internal_device_logs(int index) const {
  return _impl_.device_logs_.Get(index);
}
inline const ::bbts::gpu_device_log_t& gpu_profiler_log_t::device_logs(int index) const {
  // @@protoc_insertion_point(field_get:bbts.gpu_profiler_log_t.device_logs)
  return _internal_device_logs(index);
}
inline ::bbts::gpu_device_log_t* gpu_profiler_log_t::_internal_add_device_logs() {
  return _impl_.device_logs_.Add();
}
inline ::bbts::gpu_device_log_t* gpu_profiler_log_t::add_device_logs() {
  ::bbts::gpu_device_log_t* _add = _internal_add_device_logs();
  // @@protoc_insertion_point(field_add:bbts.gpu_profiler_log_t.device_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bbts::gpu_device_log_t >&
gpu_profiler_log_t::device_logs() const {
  // @@protoc_insertion_point(field_list:bbts.gpu_profiler_log_t.device_logs)
  return _impl_.device_logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiler_2eproto
